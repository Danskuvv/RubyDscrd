<% if user_signed_in? %>
  <!-- Top Bar -->
  <header class="top-bar">
    <div class="app-name">
     <!-- <%= image_tag("logo.png", alt: "Ruby Discord Logo") %> -->
      <h1>Ruby Discord</h1>
      <p>Welcome, <%= current_user.email %>!</p>
      
    </div>
    <div class="settings">
      <!-- Placeholder for settings icon, use an image or icon font -->
      <%= image_tag("settings-icon.png", alt: "Settings") %>
      <%= button_to 'Logout', destroy_user_session_path, method: :delete, data: { turbo: false }, class: "logout-button" %>
    </div>
  </header>

  <!-- Main Container -->
  <div class="main-container">
    <!-- Left Side: Friendships Area -->
    <aside class="friendships-area">
      <!-- Pending Friend Requests Section -->
      <section class="pending-requests">
        <% if @friend_requests.present? %>
          <h3>Pending Friend Requests</h3>
          <ul>
            <% @friend_requests.each do |friendship| %>
              <li class="friendship-item">
                <!-- Assuming friendship.user is the one who initiated the request -->
                <strong><%= friendship.user.email %></strong> has sent you a friend request.
                <br>
                <!-- Buttons to accept or reject the request -->
                <%= button_to 'Accept', friendship_path(friendship), 
                    method: :patch, params: { friendship: { friendship_status: 'accepted' } },
                    data: { confirm: 'Accept this friend request?' }, class: "friendship-button" %>
                <%= button_to 'Reject', friendship_path(friendship), 
                    method: :patch, params: { friendship: { friendship_status: 'rejected' } },
                    data: { confirm: 'Reject this friend request?' }, class: "friendship-button" %>
              </li>
            <% end %>
          </ul>
        <% else %>
          <!--<p>No pending friend requests.</p>-->
        <% end %>
      </section>

      <!-- Friends List Section -->
      <section class="friends-list">
        <h3>Your Friends</h3>
        <% if @friends.present? %>
          <ul>
            <% @friends.each do |friend| %>
              <li class="friend-box">
                <!-- We use Conversation.between to find (or create) the conversation for this friend pair.
                     The link includes a query parameter (conversation_id) so that the home page can load that conversation. -->
                <%= link_to friend.email, home_index_path(conversation_id: Conversation.between(current_user, friend).id) %>
              </li>
            <% end %>
          </ul>
        <% else %>
          <p>You have no friends yet.</p>
        <% end %>
      </section>

      <!-- Send a Friend Request Section -->
      <section class="send-friend-request">
        <h3>Send a Friend Request</h3>
        <%= form_with url: friendships_path, method: :post, local: true do |form| %>
          <div class="form-field">
            <%= form.label :friend_email, "Friend's Email:" %>
            <%= form.text_field :friend_email, placeholder: "Enter email" %>
          </div>
          <%= form.submit "Send Friend Request", class: "friendship-button" %>
        <% end %>
      </section>
    </aside>

    <!-- Right Side: Chat Area -->
    <section class="chat-area" data-conversation-id="<%= @current_conversation&.id %>">
      <% if @current_conversation %>
        <% # Subscribe to Turbo Streams for this conversation %>
        <turbo-stream-from stream="conversation_<%= @current_conversation.id %>" />
        
        <% # Determine the chat partner's email %>
        <% chat_partner = (@current_conversation.user1 == current_user ? @current_conversation.user2 : @current_conversation.user1) %>
        <h2>Chat with <%= chat_partner.email %></h2>

        <div class="chat-messages" id="chat-messages">
          <% @current_conversation.messages.order(:created_at).each do |message| %>
            <div class="message <%= 'sent' if message.sender == current_user %>">
              <strong><%= message.sender.email %>:</strong> <%= message.body %>
              <small><%= message.created_at.strftime("%H:%M") %></small>
            </div>
          <% end %>
        </div>

        <div class="message-form" id="message-form">
          <%= form_with model: [@current_conversation, Message.new] do |f| %>
            <!-- [@current_conversation, Message.new] -->
            <%= f.text_area :body, placeholder: "Type your message..." %>
            <%= f.submit "Send" %>
          <% end %>
        </div>
      <% else %>
        <p>Select a friend to start chatting.</p>
      <% end %>
    </section>
  </div>

  
<% else %>
  <!-- Logged Out View -->
  <div class="login-container">
    <div class="login-box">
      <div class="logo">
        <!-- Replace with your actual logo image source -->
        <%= image_tag("logo.png", alt: "Ruby Discord Logo") %>
        <h1>Ruby Discord</h1>
      </div>
      <div class="login-buttons">
        <%= link_to 'Sign In', new_user_session_path, class: "login-button" %>
        <%= link_to 'Sign Up', new_user_registration_path, class: "login-button" %>
        <%= link_to 'Forgot Password?', new_user_password_path, class: "login-button" %>
      </div>
    </div>
  </div>
<% end %>

<!-- Polling Script for Refreshing Chat Messages Every 5 Seconds -->
<script>
  document.addEventListener("turbo:load", function() {
    // Set an interval to refresh chat messages every 5 seconds
    setInterval(function() {
      // Get the conversation ID from your chat area container
      const chatArea = document.querySelector(".chat-area");
      if (!chatArea) return;
      
      const conversationId = chatArea.dataset.conversationId;
      if (!conversationId) return;

      // Fetch the latest messages from the server
      fetch(`/conversations/${conversationId}/messages`, {
        headers: {
          Accept: "text/html"
        }
      })
      .then(response => response.text())
      .then(html => {
        // Replace the contents of the chat messages container
        document.getElementById("chat-messages").innerHTML = html;
      })
      .catch(error => console.error("Error fetching messages:", error));
    }, 5000); // every 5000ms = 5 seconds
  });

  document.addEventListener("turbo:load", function() {
  const chatMessages = document.querySelector("turbo-stream-from");
  if (chatMessages) {
    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
});
</script>
